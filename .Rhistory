dev.off()
pdf("assignment-3-plot.pdf")
ggplot(output, aes(x = V1, y = V2)) +
ggtitle("Maximum Likelihood") +
geom_line(colour = "purple") +
xlab("P(H)") +
ylab("Likelihood") +
theme(axis.text = element_text(size=10, face = "bold"), axis.title = element_text(size=30, face = "bold"))
dev.off()
source('~/Desktop/plotting.R')
pdf("assignment-3-plot.pdf")
ggplot(output, aes(x = V1, y = V2)) +
ggtitle("Maximum Likelihood") +
geom_line(colour = "purple") +
xlab("P(H)") +
ylab("Likelihood") +
theme(axis.text = element_text(size=10, face = "bold"), axis.title = element_text(size=30, face = "bold"))
dev.off()
getwd()
output <- read.delim("~/Desktop/output.tsv", header=FALSE)
View(output)
View(output)
View(output)
pdf("assignment-3-plot.pdf")
ggplot(output, aes(x = V1, y = V2)) +
ggtitle("Maximum Likelihood") +
geom_line(colour = "purple") +
xlab("P(H)") +
ylab("Likelihood") +
theme(axis.text = element_text(size=10, face = "bold"), axis.title = element_text(size=30, face = "bold"))
dev.off()
install.packages("ggplot2")
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
pdf("assignment-3-plot.pdf")
ggplot(output, aes(x = V1, y = V2)) +
ggtitle("Maximum Likelihood") +
geom_line(colour = "purple") +
xlab("P(H)") +
ylab("Likelihood") +
theme(axis.text = element_text(size=10, face = "bold"), axis.title = element_text(size=30, face = "bold"))
dev.off()
swirl()
library("swirl", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
swirl()
library(vegan)
version
install.packages(c("cowplot", "curl", "devtools", "ggplot2", "htmltools", "knitr", "multcomp", "qiimer", "R6", "tidyr", "vegan"))
updateR()
install.packages(picante)
install.packages("picante",repos="http://R-Forge.R-project.org")
sample_names(rich_sparse)
setwd("~/Documents/Education/UOBioinformatics/genomics2/project/16samp/gg")
library(phyloseq)
library(ggplot2)
library(grid)
theme_set(theme_bw())
rich_sparse = import_biom("green_97_otus_fixed.biom", parseFunction = parse_taxonomy_default)
rank_names(rich_sparse)
sample_names(rich_sparse)
tax_table(rich_sparse)
sample_variables(rich_sparse)
get_variable(rich_sparse, sample_variables(rich_sparse)[2])
get_variable(rich_sparse, sample_variables(rich_sparse)[2][1:])
get_variable(rich_sparse, sample_variables(rich_sparse)[2][1:10])
get_variable(rich_sparse, sample_variables(rich_sparse)[2])[1:10]
site <- get_variable(rich_sparse, sample_variables(rich_sparse)[2])["Pasture"]
get_variable(rich_sparse, sample_variables(rich_sparse)[2])["Pasture"]
get_variable(rich_sparse, sample_variables(rich_sparse)[2])["Pasture"]
pasture_prune <- prune_samples(sample_variables(rich_sparse)[2]=="Pasture", rich_sparse)
sample_variables(rich_sparse)[2]=="Pasture"
sample_variables(rich_sparse)[2]
sample_variables(rich_sparse)
setwd("~/Desktop")
k_otu_table <- read.table("all_smpls.otu_tbl.txt", header = T, sep = "\t")
library(reshape)
k_otu_table_reshape <- t(k_otu_table)
head(k_otu_table_reshape)
head(k_otu_table)
write.table(k_otu_table_reshape, file = "reshaped_otu_table", sep = "\t", row.names = T, col.names = T)
library(biom)
biom_path <- file("/Users/jess/Documents/Education/UOBioinformatics/genomics2/project/bioms/rarefied_DN97/json_DN_97_2000.biom")
biom_file <- read_biom(biom_path)
biom_data(biom_file)
header(biom_data)
header(biom_file)
biom_shape(biom_file)
sample_metadata(biom_file)
rownames(biom_file)
colnames(biom_file)
biom_path <- file("/Users/jess/Documents/Education/UOBioinformatics/genomics2/project/bioms/DN_97_C_metadata.biom")
biom_file <- read_biom(biom_path)
biom_path <- file("/Users/jess/Documents/Education/UOBioinformatics/genomics2/project/bioms/DN_97_C.biom")
biom_file <- read_biom(biom_path)
sample_metadata(biom_file)
parsed_biom <- biom_data(biom_file, x1)
install.packages("matR")
library(matR)
matR_path <- gsub( "matR$", "", find.package("matR") )
remove.packages("matR", lib=matR_path)
setwd("~/Desktop/biom_test")
SC98_biom = import_biom("otu_table_mc2__Site_SC98__.biom", parseFunction = parse_taxonomy_default)
library(phyloseq)
library(ggplot2)
library(grid)
library(vegan)
theme_set(theme_bw())
rank_names(SC98_biom)
rank_names(SC98_biom)
sample_names(SC98_biom)
tax_table(SC98_biom)
sample_variables(SC98_biom)
print(SC98_biom)
SC98_biom = import_biom("otu_table_mc2__Site_SC98__.biom", parseFunction = parse_taxonomy_greengenes)
rank_names(SC98_biom)
sample_names(SC98_biom)
tax_table(SC98_biom)
sample_variables(SC98_biom)
print(SC98_biom)
full_biom = import_biom("otu_table_mc2_w_tax.biom", parseFunction = parse_taxonomy_greengenes)
rank_names(full_biom)
meta_biom = import_biom("SC98_w_metadata.biom", parseFunction = parse_taxonomy_greengenes)
meta_biom = import_biom("SC98_w_metadata.biom", parseFunction = parse_taxonomy_greengenes)
library(biom)
read_biom("SC98_w_metadata.biom")
x1 = read_biom("SC98_w_metadata.biom")
biom_data(x1)
observation_metadata(x1)
head(observation_metadata(x1))
sample_metadata(x1)
setwd("~/Desktop/biom_test")
full_biom = import_biom("otu_table_mc2_w_tax.biom", parseFunction = parse_taxonomy_greengenes)
rank_names(full_biom)
sample_names(full_biom)
sample_variables(full_biom)
sample_variables(full_biom)
sample_metadata(full_biom)
setwd("~/Desktop/BI331-taxonomy/")
#Install and load packages needed for this script
require(dplyr)
require(tidyr)
require(ggplot2)
require(scales)
###--- PART ONE: TAXONOMIC COMPARISON ---###
#Load in the data generated from the RDP classifier. This script uses the heirarchy files:
BF_table <- read.table("BF_heir.txt", header = TRUE, sep = "\t")
EU_table <- read.table("EU_heir.txt", header = TRUE, sep = "\t")
#the dplyr package is a great tool for manipulating data frames. In order to make our plots work we need to...
#reformat and combine our tables
bf <- BF_table %>%
#pull out only the rows that have phylum-level data (including unclassified)
filter(grepl('Root;rootrank;Bacteria;domain;unclassified_Bacteria', lineage) | rank=="phylum") %>%
#we only need the "name" and  ".fasta" columns:
select(one_of(c("name", "BF_samples.fasta"))) %>%
#to help join our two samples we make a new column called "sample" with every entry showing "Burkina Faso"
mutate(sample = "Burkina Faso") %>%
#renaming the ".fasta" column to "OTUs"
rename(OTUs = BF_samples.fasta)
#Repeat for the Europe table
eu <-EU_table %>%
filter(grepl('Root;rootrank;Bacteria;domain;unclassified_Bacteria', lineage) | rank=="phylum") %>%
select(one_of(c("name", "EU_samples.fasta"))) %>%
mutate(sample = "Europe") %>%
rename(OTUs = EU_samples.fasta)
#Bind the two tables by their rows, this puts our table in "long format"
abundance_table <- rbind(bf, eu)
#Add a new column that corresponds to the percentage of the phylum in the sample (BF or EU)
abundance_table <- group_by(abundance_table, sample) %>%
mutate(percent=as.numeric(paste0(round(OTUs/sum(OTUs), 4)))) %>%
ungroup
# plot using the ggplot2 package:
ggplot(abundance_table, aes(x=sample, y=percent, fill=name)) +
#instead of the default "counts" binning make the y axis correspond to percents
geom_bar(stat="identity") +
#make it pretty
scale_fill_brewer(palette = "Set1", name = "Phylum") +
scale_y_continuous(labels = percent) +
labs(title ="Microbiome Composition:\nBurkina Faso vs. Europe", x = "Origin", y = "")
#save the plot (this creates a picture in your current working directory)
ggsave("abundance_stacked_barplot.png")
###--- PART TWO: STATISTICAL COMMUNITY COMPARISON ---###
#read in the libcompare file
libcompare <- read.table("libcompare.txt", header = TRUE, sep = "\t", skip = 3)
#use dplyr to reshape the data in order to plot
sig <- libcompare %>%
rename("BurkinaFaso" = Sample1, "Europe" = Sample2) %>%
#pull out only phylum level - note we aren't looking at unclassified in this case
filter(Rank == "phylum") %>%
#here we use the gather function to move OTU counts into one column and create a new column for the country of origin
gather(sample, OTUs, BurkinaFaso, Europe) %>%
#arrange in descending values of significance (lower = more significance) and group this by name
arrange(Significance, Name) %>%
#filter the lowest 8 rows, or 4 phyla (from each sample)
do(head(., n=8))
#use ggplot to create a clustered bar chart
ggplot(sig, aes(x=Name, y=OTUs, fill=sample)) +
#make this a clustered bar (dodge) and instead of the default binning, use # of OTUs as y axis
geom_bar(position="dodge", stat="identity") +
#make it pretty
scale_fill_brewer(palette = "Accent", name = "Origin") +
#add informative lables
labs(title ="Top Significantly Different Phyla:\nBurkina Faso vs. Europe", x = "Phylum", y = "OTUs") +
#ggplot defaults to alphabetical order, tell it instead to use the order in our data frame, grouped by Name:
scale_x_discrete(limits = sig$Name)
#save to a file in your working directory
ggsave("significance_clustered_bar.png")
View(sig)
View(libcompare)
libcompare %>%
rename("BurkinaFaso" = Sample1, "Europe" = Sample2) %>%
#pull out only phylum level - note we aren't looking at unclassified in this case
filter(Rank == "phylum") %>%
#here we use the gather function to move OTU counts into one column and create a new column for the country of origin
gather(sample, OTUs, BurkinaFaso, Europe) %>%
#arrange in descending values of significance (lower = more significance) and group this by name
arrange(Significance, Name)
libcompare %>%
rename("BurkinaFaso" = Sample1, "Europe" = Sample2) %>%
#pull out only phylum level - note we aren't looking at unclassified in this case
filter(Rank == "phylum")
libcompare %>%
rename("BurkinaFaso" = Sample1, "Europe" = Sample2) %>%
#pull out only phylum level - note we aren't looking at unclassified in this case
filter(Rank == "phylum") %>%
#here we use the gather function to move OTU counts into one column and create a new column for the country of origin
gather(sample, OTUs, BurkinaFaso, Europe) %>%
#arrange in descending values of significance (lower = more significance) and group this by name
arrange(Significance, Name)
